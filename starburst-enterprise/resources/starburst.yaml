apiVersion: charts.starburstdata.com/v1alpha1
kind: StarburstEnterprise
metadata:
  name: starburstenterprise-sample
spec:
  additionalVolumes: []
  cache:
    diskUsagePercentage: 80
    enabled: false
    ttl: 7d
    volume:
      emptyDir: {}
  catalogs:
    kafka: |-
      connector.name=kafka
      kafka.security-protocol=SASL_SSL
      kafka.authentication.type=PASSWORD
      kafka.authentication.username=ADD_USERNAME
      kafka.authentication.password=ADD_PASSWORD
      kafka.nodes=ADD_BOOTSTRAP_SERVER
      kafka.table-names=messages
      kafka.hide-internal-columns=false
    customer-domain: |-
      connector.name=postgresql
      connection-url=jdbc:postgresql://customer-domain:5432/example
      connection-user=ADD_USERNAME
      connection-password=ADD_PASSWORD
    finance-domain: |-
      connector.name=postgresql
      connection-url=jdbc:postgresql://finance-domain:5432/example
      connection-user=ADD_USERNAME
      connection-password=ADD_PASSWORD
    datalake: |-
      connector.name=hive-hadoop2
      hive.metastore.uri=thrift://hive:9083
      hive.s3.aws-access-key=
      hive.s3.aws-secret-key=
      hive.s3.path-style-access=true
      hive.s3.endpoint=
      hive.s3.ssl.enabled=false
  coordinator:
    additionalProperties: ''
    affinity: {}
    deploymentAnnotations: {}
    envFrom: []
    etcFiles:
      jvm.config: |
        -server
        -XX:-UseBiasedLocking
        -XX:+UseG1GC
        -XX:G1HeapRegionSize=32M
        -XX:+ExplicitGCInvokesConcurrent
        -XX:+ExitOnOutOfMemoryError
        -XX:+UseGCOverheadLimit
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:ReservedCodeCacheSize=512M
        -Djdk.nio.maxCachedBufferSize=2000000
        -Djdk.attach.allowAttachSelf=true
      other: {}
      properties:
        config.properties: >
          # When enabling TLS for internal communication don't set
          node.internal-address since

          # it'll be set automatically to coordinator.<namespace>.svc.

          # Add DNS:starburst, DNS:coordinator.<namespace>.svc and
          DNS:*.worker.<namespace>.svc as SAN in your certs

          coordinator=true

          node-scheduler.include-coordinator=false

          http-server.http.port=8080

          discovery-server.enabled=true

          discovery.uri=http://localhost:8080
        log.properties: |
          # Enable verbose logging from Starburst Enterprise
          #io.trino=DEBUG
          #com.starburstdata.presto=DEBUG
        node.properties: |
          node.environment={{ include "starburst.environment" . }}
          node.data-dir=/data/starburst
          plugin.dir=/usr/lib/starburst/plugin
          node.server-log-file=/var/log/starburst/server.log
          node.launcher-log-file=/var/log/starburst/launcher.log
    heapHeadroomPercentage: 30
    heapSizePercentage: 90
    nodeMemoryHeadroom: 2Gi
    nodeSelector: {}
    podAnnotations: {}
    resources:
      limits:
        cpu: 4
        memory: 16Gi
      requests:
        cpu: 1
        memory: 4Gi
    tolerations: []
  expose:
    clusterIp:
      name: starburst
      ports:
        http:
          port: 8080
    ingress:
      annotations: {}
      ingressName: coordinator-ingress
      path: /
      serviceName: starburst
      servicePort: 8080
      tls:
        enabled: true
    loadBalancer:
      IP: ''
      annotations: {}
      name: starburst
      ports:
        http:
          port: 8080
      sourceRanges: []
    nodePort:
      name: starburst
      ports:
        http:
          nodePort: 30080
          port: 8080
    type: clusterIp
  externalSecrets:
    enabled: false
    goDaddy:
      backendType: secretsManager
    secretPrefix: external0
    type: goDaddy
  extraArguments: []
  image:
    pullPolicy: IfNotPresent
    repository: registry.connect.redhat.com/starburst/starburst-enterprise
    tag: 354-e-ubi
  initFile: ''
  initImage:
    pullPolicy: IfNotPresent
    repository: registry.connect.redhat.com/starburst/starburst-enterprise-init
    tag: 354.0.0-ubi
  internal:
    ports:
      http:
        port: 8080
      https:
        port: 8443
  livenessProbe:
    exec:
      command:
        - /bin/sh
        - '-c'
        - >-
          curl --max-time 5 -s http://localhost:8080/v1/info | grep
          \"starting\":false
    failureThreshold: 1
    initialDelaySeconds: 300
    periodSeconds: 300
    timeoutSeconds: 30
  prometheus:
    agent:
      config: /etc/starburst/telemetry/prometheus.yaml
      port: 8081
      version: 0.15.0
    enabled: true
    rules:
      - attrNameSnakeCase: true
        name: $1
        pattern: trino.execution<name=QueryManager><>(running_queries|queued_queries)
        type: GAUGE
      - name: failed_queries
        pattern: trino.execution<name=QueryManager><>FailedQueries\.TotalCount
        type: COUNTER
  query:
    maxConcurrentQueries: 3
  readinessProbe:
    exec:
      command:
        - /bin/sh
        - '-c'
        - >-
          curl --max-time 5 -s http://localhost:8080/v1/info | grep
          \"starting\":false
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 30
  registryCredentials:
    enabled: false
  securityContext: {}
  spilling:
    enabled: false
    volume:
      emptyDir: {}
  starburst-charts-common:
    global: {}
  usageMetrics:
    enabled: true
    reporter:
      configFiles:
        config.json: ''
      enabled: false
      image:
        pullPolicy: IfNotPresent
        repository: harbor.starburstdata.net/testing/usage-metrics-reporter
        tag: 0.1.3-alpha
    usageClient:
      initialDelay: 1m
      interval: 1m
  userDatabase:
    enabled: true
    users:
      - password: 
        username: 
  worker:
    additionalProperties: ''
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    deploymentAnnotations: {}
    deploymentTerminationGracePeriodSeconds: 300
    envFrom: []
    etcFiles:
      jvm.config: |
        -server
        -XX:-UseBiasedLocking
        -XX:+UseG1GC
        -XX:G1HeapRegionSize=32M
        -XX:+ExplicitGCInvokesConcurrent
        -XX:+ExitOnOutOfMemoryError
        -XX:+UseGCOverheadLimit
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:ReservedCodeCacheSize=512M
        -Djdk.nio.maxCachedBufferSize=2000000
        -Djdk.attach.allowAttachSelf=true
      other: {}
      properties:
        config.properties: >
          # When enabling TLS for internal communication don't set
          node.internal-address since

          # it'll be set automatically to <pod-ip>.worker.<namespace>.svc.

          # Add DNS:starburst, DNS:coordinator.<namespace>.svc and
          DNS:*.worker.<namespace>.svc as SAN in your certs

          coordinator=false

          http-server.http.port=8080

          discovery.uri=http://{{ include "starburst.service.name" . }}:8080
        log.properties: |
          # Enable verbose logging from Starburst Enterprise
          #io.trino=DEBUG
          #com.starburstdata.presto=DEBUG
        node.properties: |
          node.environment={{ include "starburst.environment" . }}
          node.data-dir=/data/starburst
          plugin.dir=/usr/lib/starburst/plugin
          node.server-log-file=/var/log/starburst/server.log
          node.launcher-log-file=/var/log/starburst/launcher.log
    heapHeadroomPercentage: 30
    heapSizePercentage: 90
    nodeMemoryHeadroom: 2Gi
    nodeSelector: {}
    podAnnotations: {}
    starburstWorkerShutdownGracePeriodSeconds: 120
    replicas: 3
    resources:
      limits:
        cpu: 4
        memory: 25Gi
      requests:
        cpu: 1
        memory: 6Gi
    tolerations: []
  starburstPlatformLicense: mylicense
